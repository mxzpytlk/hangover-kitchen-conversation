type UserNotification {
  userName: String!
}

type RoomNotification {
  roomTitle: String!
  roomId: String!
}

"""
Объекты, которые могут лежать внутри Notification. Клиент сам должен обработать их и вывести нужное сообщение.
"""
union NotificationValue = UserNotification | RoomNotification

enum NotificationType {
  """
  Уведомление для админов комнат о том, что пользователь хочет к ним присоединится.
  В value лежит UserNotification
  """
  USER_WANT_JOIN_ROOM
  """
  Уведомление пользоваетля о том, что ему разрешили присоединиться к комнате.
  В value лежит RoomNotification.
  """
  ROOM_ACCESS_ALLOWED
  UNKNOWN
}

type Notification {
  type: NotificationType
  value: NotificationValue
}

"""
При подписке клиенту необходимо отправлять access token в параметрах соединения с ключем auhorization.
Также необходимо помнить, что каждые полчаса access token сбрасывается и клиенту необходимо установить соединение заново,
с валидным токеном.
"""
type Subscription {
  """
  Подписка на уведомления.
  """
  notify: Notification
}

type Query {
  """
  Возвращает уведомления, которые пришли пользователю. Необходимо отправить запрос при запуске приложения.
  В последующие разы рекомендуется использовать подписку.

  From и to диапозон порядковых значений, внутри которого будут возвращаться уведомления. Отсутствие какого-либо параметра сервер 
  расценивает, как верхнюю/нижнюю границу.
  """
  getNotifications(from: Int, to: Int): [Notification!]!
}
