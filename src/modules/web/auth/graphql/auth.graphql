enum RegisterResult {
  SUCCESS
  FAILED
}

type SuccessAuth {
  user: User!
  accessToken: String!
}

type Query {
  """
  Вход пользователя в приложение. Возвращает пользователя и accessToken.
  Сервер в дальнейшем будет определять зарегестрирован пользователь или нет по этому токену,
  который должен лежать в заголовке Authorization в виде "Bearer accessToken".
  Токен действителен в течении 30 минут, потом все запросы, где пользователю нужно будет иметь доступ,
  будут возвращать ошибку UNAUTHORISED. 
  Также на клиенте должны быть включены credentials, чтобы сервер мог выполнить мутацию refresh.
  Если это будет невозможно, то нужно будет переписать мутацию refreah на сервере.
  Клиенту необходимо отправить refresh мутацию,
  и если она вернет еще раз ошибку UNAUTHORISED, то клиенту следует выйти из приложения.
  """
  login(email: String!, password: String!): SuccessAuth!
}

type Mutation {
  """
  Регистрация пользователя.

  В случае, если пользователь с таким email уже существует, возвращает BAD_USER_INPUT.
  Возвращает SUCCESS, если мутация выполнена успешно.
  Отправляет пользователю на почту сообщение с ссылкой, по которой нужно перейти для активации аккаунта.
  """
  register(email: String!, password: String!): RegisterResult
  """
  При аутентификации пользователя, сервер встраивает в сессию куки с флагом httpOnly.
  Эти куки и используются для аутентификации. Клиенту не следует их трогать и устанавливать самостоятельно.
  """
  refresh: SuccessAuth
  logout: Boolean
}